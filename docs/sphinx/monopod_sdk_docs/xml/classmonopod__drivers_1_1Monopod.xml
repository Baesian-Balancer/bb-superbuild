<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classmonopod__drivers_1_1Monopod" kind="class" language="C++" prot="public">
    <compoundname>monopod_drivers::Monopod</compoundname>
    <includes refid="monopod_8hpp" local="no">monopod.hpp</includes>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1Buffers" prot="private">monopod_drivers::Monopod::Buffers</innerclass>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1CanBus" prot="private">monopod_drivers::Monopod::CanBus</innerclass>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1JointLimit" prot="public">monopod_drivers::Monopod::JointLimit</innerclass>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1JointReadState" prot="private">monopod_drivers::Monopod::JointReadState</innerclass>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1JointSettingState" prot="private">monopod_drivers::Monopod::JointSettingState</innerclass>
    <innerclass refid="structmonopod__drivers_1_1Monopod_1_1PID" prot="public">monopod_drivers::Monopod::PID</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcb" prot="private" static="no" strong="no">
        <type></type>
        <name>MotorMeasurementIndexing</name>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba60ecff7d9b48b37abb16b5420ae77a27" prot="private">
          <name>current</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcbac84eb9f453583b4c6b8ff726382dc996" prot="private">
          <name>position</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba712ca37851a533d992f73e95fa776df3" prot="private">
          <name>velocity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba8b23c869a1dccf6667f06ffa52e3ce61" prot="private">
          <name>encoder_index</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcbab94555e7f028aee31b3522d4fff187b9" prot="private">
          <name>motor_measurement_count</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MotorMeasurementIndexing this enum allow to access the different kind of sensor measurements in an understandable way in the code. </para>
        </briefdescription>
        <detaileddescription>
<para>Note: This is same as in <ref refid="leg_8hpp" kindref="compound">leg.hpp</ref> for consistency </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="445" column="1" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="444" bodyend="451"/>
      </memberdef>
      <memberdef kind="enum" id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99" prot="private" static="no" strong="no">
        <type></type>
        <name>JointNameIndexing</name>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a4711584ab81fbca168bd7c8981d7a3e0" prot="private">
          <name>hip_joint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a7b8018b7ff74a44fb3baaedca53f1486" prot="private">
          <name>knee_joint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99ae57f6fc599cdb052e5a1a9f9eacbc1bb" prot="private">
          <name>boom_connector_joint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99aace486a8075e43c9491a98250c148ca1" prot="private">
          <name>planarizer_yaw_joint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a90637c981a734b0ccca41e881c9b8bbe" prot="private">
          <name>planarizer_pitch_joint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates the joint names for indexing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="457" column="1" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="456" bodyend="463"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a16549890996092c7649389d643a68eab" prot="public" static="no" mutable="no">
        <type>const std::unordered_map&lt; std::string, int &gt;</type>
        <definition>const std::unordered_map&lt;std::string, int&gt; monopod_drivers::Monopod::joint_names</definition>
        <argsstring></argsstring>
        <name>joint_names</name>
        <initializer>= {
       {&quot;hip_joint&quot;, hip_joint},
       {&quot;knee_joint&quot;, knee_joint},
       {&quot;boom_connector_joint&quot;, boom_connector_joint},
       {&quot;planarizer_yaw_joint&quot;, planarizer_yaw_joint},
       {&quot;planarizer_pitch_joint&quot;, planarizer_pitch_joint}
   }</initializer>
        <briefdescription>
<para>Joint names indexed same as enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="329" column="29" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a0632e002e62cfa6273659449dbf2e600" prot="private" static="no" mutable="no">
        <type>real_time_tools::RealTimeThread</type>
        <definition>real_time_tools::RealTimeThread monopod_drivers::Monopod::rt_thread_</definition>
        <argsstring></argsstring>
        <name>rt_thread_</name>
        <briefdescription>
<para>the realt time thread object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="406" column="36" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1ac394ab54f5078062b1b55b8fb78e1373" prot="private" static="no" mutable="no">
        <type>struct monopod_drivers::Monopod::CanBus</type>
        <definition>struct monopod_drivers::Monopod::CanBus monopod_drivers::Monopod::canbus_</definition>
        <argsstring></argsstring>
        <name>canbus_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="416" column="12"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a4c351e15fbf8b1115a792bce59c05c7b" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classmonopod__drivers_1_1Planarizer" kindref="compound">monopod_drivers::Planarizer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;monopod_drivers::Planarizer&gt; monopod_drivers::Monopod::planarizer_</definition>
        <argsstring></argsstring>
        <name>planarizer_</name>
        <briefdescription>
<para>robot <ref refid="classmonopod__drivers_1_1Leg" kindref="compound">Leg</ref> interface object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="421" column="21" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1ab038286a12c8d2775d7b563580fd8c98" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classmonopod__drivers_1_1Leg" kindref="compound">monopod_drivers::Leg</ref> &gt;</type>
        <definition>std::unique_ptr&lt;monopod_drivers::Leg&gt; monopod_drivers::Monopod::leg_</definition>
        <argsstring></argsstring>
        <name>leg_</name>
        <briefdescription>
<para>robot <ref refid="classmonopod__drivers_1_1Leg" kindref="compound">Leg</ref> interface object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="426" column="21" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a7013bfa7198f2982cd6d8dd430507229" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::stop_loop</definition>
        <argsstring></argsstring>
        <name>stop_loop</name>
        <briefdescription>
<para>managing the stopping of the loop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="431" column="10" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a50e842d324700c43df579280baa1c3b5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::is_initialized</definition>
        <argsstring></argsstring>
        <name>is_initialized</name>
        <briefdescription>
<para>boolen defining if sdk is initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="436" column="10" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1a7cbfafb7c7206e90564f38c7b4773b0c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; monopod_drivers::Monopod::motor_joint_indexing</definition>
        <argsstring></argsstring>
        <name>motor_joint_indexing</name>
        <initializer>=
    {
      hip_joint,
      knee_joint
    }</initializer>
        <briefdescription>
<para>Write Joint names indexed same as enumerator for actuators. All valid controlled joints should be defined here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="469" column="18" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1aa6384118d7316a123b097d6c51552f3d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; monopod_drivers::Monopod::encoder_joint_indexing</definition>
        <argsstring></argsstring>
        <name>encoder_joint_indexing</name>
        <initializer>=
    {
      hip_joint,
      knee_joint,
      boom_connector_joint,
      planarizer_yaw_joint,
      planarizer_pitch_joint
    }</initializer>
        <briefdescription>
<para>Read Joint names indexed same as enumerator for encoders. All valid joints should be defined here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="479" column="17" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmonopod__drivers_1_1Monopod_1ad25953b1b9f60b1bc31132ffcef2ee4c" prot="private" static="no" mutable="no">
        <type>struct monopod_drivers::Monopod::Buffers</type>
        <definition>struct monopod_drivers::Monopod::Buffers monopod_drivers::Monopod::buffers</definition>
        <argsstring></argsstring>
        <name>buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="592" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ae3a7af8441f2c1b4f7b2e826c3e89080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>monopod_drivers::Monopod::Monopod</definition>
        <argsstring>()</argsstring>
        <name>Monopod</name>
        <briefdescription>
<para>Construct a new <ref refid="classmonopod__drivers_1_1Monopod" kindref="compound">Monopod</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a5869ce3529ca5f3e37ce494c52b6206f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>monopod_drivers::Monopod::~Monopod</definition>
        <argsstring>()</argsstring>
        <name>~Monopod</name>
        <briefdescription>
<para>Destroy the <ref refid="classmonopod__drivers_1_1Monopod" kindref="compound">Monopod</ref> object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a7cba1ddfde1ff619563fe58b4d28741d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::initialize</definition>
        <argsstring>()</argsstring>
        <name>initialize</name>
        <briefdescription>
<para>Initialize canbus connections to encoder board and motor board. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a5893584bb926a578836423b08bddbdf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::initialized</definition>
        <argsstring>()</argsstring>
        <name>initialized</name>
        <briefdescription>
<para>is the monopod sdk Initialized?. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a4b4d1cc4820071f34ecfadba93e5c4d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void monopod_drivers::Monopod::start_loop</definition>
        <argsstring>()</argsstring>
        <name>start_loop</name>
        <briefdescription>
<para>This method is a helper to start the thread loop. Requires the class to be initialized before the loop can be started. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a922ef7e908264a38d0681b6fa2025525" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string monopod_drivers::Monopod::get_model_name</definition>
        <argsstring>() const</argsstring>
        <name>get_model_name</name>
        <briefdescription>
<para>Get model name. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String of model name </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="70" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a62d5bdeed940ca4d6fa6cfe9191dfc34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, int &gt;</type>
        <definition>std::unordered_map&lt;std::string, int&gt; monopod_drivers::Monopod::get_joint_names</definition>
        <argsstring>() const</argsstring>
        <name>get_joint_names</name>
        <briefdescription>
<para>Get a map of joint strings indexing their enumerator index. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Unordered map of joint name strings as key and index as value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="77" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a17c88e9356b121343809992ccb9c7e92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::is_joint_controllable</definition>
        <argsstring>(const int joint_index)</argsstring>
        <name>is_joint_controllable</name>
        <param>
          <type>const int</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>check if the joint is a controllable joint (has a motor) or only a observation joint (encoder only). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool whether joint is controllable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a0635083d9ddab66a3fdb038a9970203d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_torque_target</definition>
        <argsstring>(const double &amp;torque_target, const int joint_index)</argsstring>
        <name>set_torque_target</name>
        <param>
          <type>const double &amp;</type>
          <declname>torque_target</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Set the torque target for some joint index. Return a bool whether successful. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torque_target</parametername>
</parameternamelist>
<parameterdescription>
<para>is the desired torque target for indexed joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool whether setting the value was successfull </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="98" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ac725cb8087c6094a58d773435991a580" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_torque_targets</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;torque_targets, const std::vector&lt; int &gt; &amp;joint_indexes={})</argsstring>
        <name>set_torque_targets</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>torque_targets</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Set the torque targets for all joint indexes. Return a bool whether successful. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>torque_targets</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of desired torque targets for indexed joints </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>names of the joints we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool whether setting the value was successfull </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a02da22787b60c7be31f9469df8858a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_pid</definition>
        <argsstring>(const int &amp;p, const int &amp;i, const int &amp;d, const int &amp;joint_index)</argsstring>
        <name>set_pid</name>
        <param>
          <type>const int &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> parameters of the joint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True for success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a08c44b34232d34bdf46bf5c322ddc12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_joint_position_limit</definition>
        <argsstring>(const double &amp;max, const double &amp;min, const int &amp;joint_index)</argsstring>
        <name>set_joint_position_limit</name>
        <param>
          <type>const double &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum Position of the joint.</para>
<para>This limit when reached will kill the robot for safety</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the maximum position of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the minimum position of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True for success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a0251e350f4819530e7e56c8659c3eae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_joint_velocity_limit</definition>
        <argsstring>(const double &amp;max, const double &amp;min, const int &amp;joint_index)</argsstring>
        <name>set_joint_velocity_limit</name>
        <param>
          <type>const double &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum velocity of the joint.</para>
<para>This limit when reached will kill the robot for safety</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the maximum velocity of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the minimum velocity of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True for success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="139" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ada84a2393fb17dd2cfa108abca457f8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_joint_acceleration_limit</definition>
        <argsstring>(const double &amp;max, const double &amp;min, const int &amp;joint_index)</argsstring>
        <name>set_joint_acceleration_limit</name>
        <param>
          <type>const double &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum acceleration of the joint.</para>
<para>This limit when reached will kill the robot for safety</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the maximum acceleration of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the minimum acceleration of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True for success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="151" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ab9dadd3075bfe2bcd88ac4834883d1bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::set_max_torque_target</definition>
        <argsstring>(const double &amp;max_torque_target, const int &amp;joint_index)</argsstring>
        <name>set_max_torque_target</name>
        <param>
          <type>const double &amp;</type>
          <declname>max_torque_target</declname>
        </param>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the maximum torque target of the joint.</para>
<para>This limit when reached will kill the robot for safety</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_torque_target</parametername>
</parameternamelist>
<parameterdescription>
<para>A double with the maximum torque of the joint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True for success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="162" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a233fc815073c8c17c2e9b5b4be3fb468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> &gt;</type>
        <definition>std::optional&lt;PID&gt; monopod_drivers::Monopod::get_pid</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_pid</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> parameters of the joint.</para>
<para>If no <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> parameters have been set, the default parameters are returned.</para>
<para><simplesect kind="return"><para>The joint <ref refid="structmonopod__drivers_1_1Monopod_1_1PID" kindref="compound">PID</ref> parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="176" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ad62ee75137e2621112245780ecd1daeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structmonopod__drivers_1_1Monopod_1_1JointLimit" kindref="compound">JointLimit</ref> &gt;</type>
        <definition>std::optional&lt;JointLimit&gt; monopod_drivers::Monopod::get_joint_position_limit</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_joint_position_limit</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the position limits of the joint.</para>
<para><simplesect kind="return"><para>The position limits of the joint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="183" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a2f8ed1649e0262ca18f361d451aa3475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structmonopod__drivers_1_1Monopod_1_1JointLimit" kindref="compound">JointLimit</ref> &gt;</type>
        <definition>std::optional&lt;JointLimit&gt; monopod_drivers::Monopod::get_joint_velocity_limit</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_joint_velocity_limit</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the velocity limits of the joint.</para>
<para><simplesect kind="return"><para>The velocity limits of the joint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="190" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ada6d6c36a9789f3597b8e05f9552d672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; <ref refid="structmonopod__drivers_1_1Monopod_1_1JointLimit" kindref="compound">JointLimit</ref> &gt;</type>
        <definition>std::optional&lt;JointLimit&gt; monopod_drivers::Monopod::get_joint_acceleration_limit</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_joint_acceleration_limit</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the velocity limits of the joint.</para>
<para><simplesect kind="return"><para>The velocity limits of the joint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="197" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a80b5106e7fd08bc2fdccfa0ed5cf7ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt;double&gt; monopod_drivers::Monopod::get_max_torque_target</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_max_torque_target</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Get the max torque. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the max torque if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="205" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a4ecb63d5d563c4c28d95bc4dd6bf5240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt;double&gt; monopod_drivers::Monopod::get_torque_target</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_torque_target</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Get the torque. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the torque if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="213" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ac0c87320a9d3b321d586761ed5c972aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;double&gt; &gt; monopod_drivers::Monopod::get_torque_targets</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;joint_indexes={})</argsstring>
        <name>get_torque_targets</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the torques of indexed joints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the torque if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="221" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1aacfc1801b2b91bc7cb35bfae4e6520b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt;double&gt; monopod_drivers::Monopod::get_position</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_position</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Get the position of joint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the position if success value of the position (NULL if not valid) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="230" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a34dc138784422485eeea8b804a2d6aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt;double&gt; monopod_drivers::Monopod::get_velocity</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_velocity</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Get the velocity of the joint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the velocity if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="238" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a1808000567433bcf5edc8813ad09ef46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; double &gt;</type>
        <definition>std::optional&lt;double&gt; monopod_drivers::Monopod::get_acceleration</definition>
        <argsstring>(const int &amp;joint_index)</argsstring>
        <name>get_acceleration</name>
        <param>
          <type>const int &amp;</type>
          <declname>joint_index</declname>
        </param>
        <briefdescription>
<para>Get the acceleration of the joint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_index</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;double&gt; containing the acceleration if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="246" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1aa8eb7ffa35c3bb02e27161b9a4b8c0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;double&gt; &gt; monopod_drivers::Monopod::get_positions</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;joint_indexes={})</argsstring>
        <name>get_positions</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the position of the joint indexes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>names of the joints we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;vector&lt;double&gt;&gt; containing vector of positions if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="254" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ac46aaaaa0eb10756642ab0304666c1ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;double&gt; &gt; monopod_drivers::Monopod::get_velocities</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;joint_indexes={})</argsstring>
        <name>get_velocities</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the velocity of the joint indexes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>names of the joints we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;std::vector&lt;double&gt;&gt; containing vector of velocities if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="262" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a0f2fb2f8d1a05ba34523b2321691d1db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;double&gt; &gt; monopod_drivers::Monopod::get_accelerations</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;joint_indexes={})</argsstring>
        <name>get_accelerations</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get the acceleration of the joint indexes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>joint_indexes</parametername>
</parameternamelist>
<parameterdescription>
<para>names of the joints we want to access </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::optional&lt;std::vector&lt;double&gt;&gt; containing vector of accelerations if success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="270" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a2a1cecec1a9b3e1c942ef573a9400a43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool monopod_drivers::Monopod::Contains</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;Vec, const T &amp;Element) const</argsstring>
        <name>Contains</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>Vec</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Element</declname>
        </param>
        <briefdescription>
<para>Template helper checking if vector contains an element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="386" column="10" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="386" bodyend="392"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ac8ea62945c2ceffd2d5af874ec5cedd5" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>THREAD_FUNCTION_RETURN_TYPE</type>
        <definition>static THREAD_FUNCTION_RETURN_TYPE monopod_drivers::Monopod::loop</definition>
        <argsstring>(void *instance_pointer)</argsstring>
        <name>loop</name>
        <param>
          <type>void *</type>
          <declname>instance_pointer</declname>
        </param>
        <briefdescription>
<para>this function is just a wrapper around the actual loop function, such that it can be spawned as a posix thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="279" column="40" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="279" bodyend="283"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a328990aaa70d52871c2f5be21f53fda2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void monopod_drivers::Monopod::loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
<para>this is a simple control loop which runs at a kilohertz. </para>
        </briefdescription>
        <detaileddescription>
<para>it reads the measurement from the analog sensor, in this case the slider. then it scales it and sends it as the current target to the motor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="292" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1a56adba6f63eb61ce096f171b72b66eec" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;double&gt; &gt; monopod_drivers::Monopod::getJointDataSerialized</definition>
        <argsstring>(const Monopod *monopod, const std::vector&lt; int &gt; &amp;joint_indexes, std::function&lt; double(int)&gt; getJointData)</argsstring>
        <name>getJointDataSerialized</name>
        <param>
          <type>const <ref refid="classmonopod__drivers_1_1Monopod" kindref="compound">Monopod</ref> *</type>
          <declname>monopod</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>joint_indexes</declname>
        </param>
        <param>
          <type>std::function&lt; double(int)&gt;</type>
          <declname>getJointData</declname>
        </param>
        <briefdescription>
<para>Simple helper method to serialized getting of data. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets indees on joint index enum </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="300" column="19" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="300" bodyend="322"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ad0cef4d4c212c4682bc6d8ea04640e37" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>static int monopod_drivers::Monopod::sgn</definition>
        <argsstring>(T val)</argsstring>
        <name>sgn</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Template helper for getting sign. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="378" column="28" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="378" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classmonopod__drivers_1_1Monopod_1ac7cdbde974fbd609db2f8eb852b9fb10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool monopod_drivers::Monopod::in_range</definition>
        <argsstring>(T value, T min, T max)</argsstring>
        <name>in_range</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Template helper checking if vector contains an element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="398" column="17" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="398" bodyend="400"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Drivers for open sim2real monopod. Interfaces with the monopod TI motors using <ref refid="classblmc__drivers_1_1BlmcJointModule" kindref="compound">blmc_drivers::BlmcJointModule</ref>. This class creates a real time control thread which reads and writes from a buffer exposed to the public api. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>std::unordered_map&lt; std::string, int &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>monopod_drivers::Monopod</label>
        <link refid="classmonopod__drivers_1_1Monopod"/>
        <childnode refid="2" relation="usage">
          <edgelabel>joint_names</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::basic_string&lt; char &gt;</label>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" line="31" column="1" bodyfile="/home/dawson/Documents/Repos/os2r-superbuild/src/monopod_sdk/src/core/include/monopod_sdk/monopod.hpp" bodystart="30" bodyend="594"/>
    <listofallmembers>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99ae57f6fc599cdb052e5a1a9f9eacbc1bb" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>boom_connector_joint</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ad25953b1b9f60b1bc31132ffcef2ee4c" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>buffers</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac394ab54f5078062b1b55b8fb78e1373" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>canbus_</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a2a1cecec1a9b3e1c942ef573a9400a43" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>Contains</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba60ecff7d9b48b37abb16b5420ae77a27" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>current</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba8b23c869a1dccf6667f06ffa52e3ce61" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>encoder_index</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1aa6384118d7316a123b097d6c51552f3d" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>encoder_joint_indexing</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a1808000567433bcf5edc8813ad09ef46" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_acceleration</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a0f2fb2f8d1a05ba34523b2321691d1db" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_accelerations</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ada6d6c36a9789f3597b8e05f9552d672" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_joint_acceleration_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a62d5bdeed940ca4d6fa6cfe9191dfc34" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_joint_names</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ad62ee75137e2621112245780ecd1daeb" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_joint_position_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a2f8ed1649e0262ca18f361d451aa3475" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_joint_velocity_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a80b5106e7fd08bc2fdccfa0ed5cf7ea5" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_max_torque_target</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a922ef7e908264a38d0681b6fa2025525" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_model_name</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a233fc815073c8c17c2e9b5b4be3fb468" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_pid</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1aacfc1801b2b91bc7cb35bfae4e6520b5" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_position</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1aa8eb7ffa35c3bb02e27161b9a4b8c0ca" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_positions</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a4ecb63d5d563c4c28d95bc4dd6bf5240" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_torque_target</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac0c87320a9d3b321d586761ed5c972aa" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_torque_targets</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac46aaaaa0eb10756642ab0304666c1ea" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_velocities</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a34dc138784422485eeea8b804a2d6aa6" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>get_velocity</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a56adba6f63eb61ce096f171b72b66eec" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>getJointDataSerialized</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a4711584ab81fbca168bd7c8981d7a3e0" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>hip_joint</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac7cdbde974fbd609db2f8eb852b9fb10" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>in_range</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a7cba1ddfde1ff619563fe58b4d28741d" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>initialize</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a5893584bb926a578836423b08bddbdf6" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>initialized</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a50e842d324700c43df579280baa1c3b5" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>is_initialized</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a17c88e9356b121343809992ccb9c7e92" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>is_joint_controllable</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a16549890996092c7649389d643a68eab" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>joint_names</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>JointNameIndexing</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a7b8018b7ff74a44fb3baaedca53f1486" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>knee_joint</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab038286a12c8d2775d7b563580fd8c98" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>leg_</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac8ea62945c2ceffd2d5af874ec5cedd5" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>loop</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a328990aaa70d52871c2f5be21f53fda2" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>loop</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ae3a7af8441f2c1b4f7b2e826c3e89080" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>Monopod</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a7cbfafb7c7206e90564f38c7b4773b0c" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>motor_joint_indexing</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcbab94555e7f028aee31b3522d4fff187b9" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>motor_measurement_count</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcb" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>MotorMeasurementIndexing</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a4c351e15fbf8b1115a792bce59c05c7b" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>planarizer_</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99a90637c981a734b0ccca41e881c9b8bbe" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>planarizer_pitch_joint</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1afd829e71523c00d8430d73e725c40f99aace486a8075e43c9491a98250c148ca1" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>planarizer_yaw_joint</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcbac84eb9f453583b4c6b8ff726382dc996" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>position</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a0632e002e62cfa6273659449dbf2e600" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>rt_thread_</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ada84a2393fb17dd2cfa108abca457f8c" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_joint_acceleration_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a08c44b34232d34bdf46bf5c322ddc12f" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_joint_position_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a0251e350f4819530e7e56c8659c3eae9" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_joint_velocity_limit</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab9dadd3075bfe2bcd88ac4834883d1bc" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_max_torque_target</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a02da22787b60c7be31f9469df8858a14" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_pid</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a0635083d9ddab66a3fdb038a9970203d" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_torque_target</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ac725cb8087c6094a58d773435991a580" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>set_torque_targets</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ad0cef4d4c212c4682bc6d8ea04640e37" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>sgn</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a4b4d1cc4820071f34ecfadba93e5c4d1" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>start_loop</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a7013bfa7198f2982cd6d8dd430507229" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>stop_loop</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1ab90d43c590449e2ad6e9e4e8370a6bcba712ca37851a533d992f73e95fa776df3" prot="private" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>velocity</name></member>
      <member refid="classmonopod__drivers_1_1Monopod_1a5869ce3529ca5f3e37ce494c52b6206f" prot="public" virt="non-virtual"><scope>monopod_drivers::Monopod</scope><name>~Monopod</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
